import logging
import pandas as pd
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

# Bot Constants
TOKEN = "8160005798:AAG-IjPvPPO9O5fnxg4LvPM3-4svFufIJEA"
SHEET_URL = "https://docs.google.com/spreadsheets/d/1EXyL4KwsLZhhzMhNi7d8MMW9qNLIo30i5xR-kOAmTaY/export?format=csv&gid=0"

# States
QUIZ, WAIT_ANSWER = range(2)

# Logging
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# Load Questions
def load_questions():
    try:
        data = pd.read_csv(SHEET_URL)
        questions = data.to_dict(orient="records")
        random.shuffle(questions)
        return questions[:20]
    except Exception as e:
        logger.error(f"Error loading questions: {e}")
        return []

# Start Command
def start(update: Update, context: CallbackContext):
    context.user_data["questions"] = load_questions()
    context.user_data["current_question"] = 0
    context.user_data["score"] = 0
    if not context.user_data["questions"]:
        update.message.reply_text("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i sau.")
        return ConversationHandler.END

    update.message.reply_text(
        "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Gameshow 'Ai L√† Cao Th·ªß Crypto?‚Äô'!\n\n"
        "üìú *Lu·∫≠t ch∆°i:*\n"
        "- C√≥ 20 c√¢u h·ªèi.\n"
        "- M·ªói c√¢u tr·∫£ l·ªùi ƒë√∫ng ƒë∆∞·ª£c 1 ƒëi·ªÉm.\n"
        "- N·∫øu kh√¥ng tr·∫£ l·ªùi trong 60 gi√¢y, b·∫°n s·∫Ω b·ªã t√≠nh 0 ƒëi·ªÉm.\n\n"
        "üî• B·∫°n ƒë√£ s·∫µn s√†ng? Nh·∫•n /quiz ƒë·ªÉ b·∫Øt ƒë·∫ßu tr·∫£ l·ªùi c√°c c√¢u h·ªèi!"
    )
    return QUIZ

# Ask Next Question
def ask_question(update: Update, context: CallbackContext):
    user_data = context.user_data
    current = user_data["current_question"]
    questions = user_data["questions"]

    # H·ªßy job timeout c≈© n·∫øu t·ªìn t·∫°i
    if "timeout_job" in user_data and user_data["timeout_job"] is not None:
        user_data["timeout_job"].schedule_removal()

    if current < len(questions):
        question = questions[current]
        options = [question["Option 1"], question["Option 2"], question["Option 3"]]
        user_data["current_question"] += 1

        reply_markup = ReplyKeyboardMarkup([[1, 2, 3]], one_time_keyboard=True)
        update.message.reply_text(
            f"üí¨ C√¢u {current + 1}: {question['Question']}\n\n"
            f"1Ô∏è‚É£ {options[0]}\n"
            f"2Ô∏è‚É£ {options[1]}\n"
            f"3Ô∏è‚É£ {options[2]}",
            reply_markup=reply_markup,
        )

        # ƒê·∫∑t timeout m·ªõi
        timeout_job = context.job_queue.run_once(timeout_handler, 60, context=update.message.chat_id)
        user_data["timeout_job"] = timeout_job
        return WAIT_ANSWER
    else:
        finish_quiz(update, context)
        return ConversationHandler.END

# Timeout Handler
def timeout_handler(context: CallbackContext):
    chat_id = context.job.context
    bot = context.bot

    user_data = context.dispatcher.user_data.get(chat_id, {})
    current = user_data.get("current_question", 0)
    questions = user_data.get("questions", [])

    if current < len(questions):
        bot.send_message(
            chat_id=chat_id,
            text=f"‚è≥ H·∫øt th·ªùi gian cho c√¢u n√†y! T·ªïng ƒëi·ªÉm hi·ªán t·∫°i c·ªßa b·∫°n l√† {user_data['score']}/20."
        )
        ask_question_via_context(context, chat_id)
    else:
        finish_quiz_via_context(context, chat_id)

# Ask Question via Context
def ask_question_via_context(context: CallbackContext, chat_id):
    user_data = context.dispatcher.user_data[chat_id]
    current = user_data.get("current_question", 0)
    questions = user_data.get("questions", [])

    if current < len(questions):
        question = questions[current]
        options = [question["Option 1"], question["Option 2"], question["Option 3"]]
        user_data["current_question"] += 1

        context.bot.send_message(
            chat_id=chat_id,
            text=f"üí¨ *C√¢u {current + 1}:* {question['Question']}\n\n"
                 f"1Ô∏è‚É£ {options[0]}\n"
                 f"2Ô∏è‚É£ {options[1]}\n"
                 f"3Ô∏è‚É£ {options[2]}",
            reply_markup=ReplyKeyboardMarkup([[1, 2, 3]], one_time_keyboard=True),
        )

        timeout_job = context.job_queue.run_once(timeout_handler, 60, context=chat_id)
        user_data["timeout_job"] = timeout_job
    else:
        finish_quiz_via_context(context, chat_id)

# Handle Answer
def handle_answer(update: Update, context: CallbackContext):
    user_data = context.user_data
    current = user_data["current_question"] - 1
    questions = user_data["questions"]

    try:
        user_answer = int(update.message.text)
    except ValueError:
        update.message.reply_text("‚ö†Ô∏è Vui l√≤ng ch·ªçn 1, 2 ho·∫∑c 3.")
        return WAIT_ANSWER

    correct_answer = int(questions[current]["Answer"])

    if user_answer == correct_answer:
        user_data["score"] += 1
        update.message.reply_text(f"üëç Ch√≠nh x√°c! T·ªïng ƒëi·ªÉm c·ªßa b·∫°n hi·ªán t·∫°i l√† {user_data['score']}/20.")
    else:
        update.message.reply_text(
            f"üò• Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√† {correct_answer}. "
            f"T·ªïng ƒëi·ªÉm hi·ªán t·∫°i c·ªßa b·∫°n l√† {user_data['score']}/20."
        )

    if current + 1 == len(questions):
        finish_quiz(update, context)
        return ConversationHandler.END
    else:
        ask_question(update, context)

# Finish Quiz
def finish_quiz(update: Update, context: CallbackContext):
    user_data = context.user_data
    score = user_data.get("score", 0)

    if score >= 15:
        result = "ü•á Si√™u cao th·ªß Crypto! T√†i kho·∫£n lu√¥n To The Moon."
    elif 12 <= score < 15:
        result = "ü•à Cao th·ªß Crypto!"
    else:
        result = "ü•â Th·∫ø gi·ªõi Crypto r·∫•t r·ªông l·ªõn v√† c√≤n nhi·ªÅu th·ª© ph·∫£i h·ªçc th√™m."

    update.message.reply_text(
        f"üéâ *Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh cu·ªôc thi 'Ai L√† Si√™u Cao Th·ªß Crypto?‚Äô'*\n\n"
        f"üèÜ *T·ªïng ƒëi·ªÉm c·ªßa b·∫°n:* {score}/20.\n{result}"
    )

# Main Function
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            QUIZ: [CommandHandler("quiz", ask_question)],
            WAIT_ANSWER: [MessageHandler(Filters.regex("^[1-3]$"), handle_answer)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
